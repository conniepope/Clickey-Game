{"version":3,"sources":["components/Card/index.js","components/Wrapper/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","name","src","image","onClick","handleClickEvent","Wrapper","children","Header","score","topScore","App","state","characters","guessedCards","console","log","includes","setState","updateTopScore","alert","reset","push","length","shuffle","shuffleArray","j","x","i","Math","floor","random","this","map","character","id","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qgDAgBeA,MAbf,SAAeC,GACX,OACA,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBAEV,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MACjCC,QAAS,kBAAMN,EAAMO,iBAAiBP,EAAMG,OAAOF,UAAU,a,MCF3DO,MAJf,SAAiBR,GACb,OAAQ,yBAAKC,UAAU,WAAWD,EAAMS,W,MCS7BC,MAVf,SAAgBV,GACZ,OACI,yBAAKC,UAAU,UACX,wBAAIA,UAAU,SAASD,EAAMS,UAC7B,wBAAIR,UAAU,SAAd,WAA+BD,EAAMW,MAArC,oBAA6DX,EAAMY,UACnE,oL,OCoGGC,E,2MApGbC,MAAQ,CACNC,WAAYA,EACZC,aAAc,GACdL,MAAO,EACPC,SAAU,G,EAIZL,iBAAmB,SAAAJ,GACjBc,QAAQC,IAAIf,GAEZ,IAAIa,EAAe,EAAKF,MAAME,aAO1BA,EAAaG,SAAShB,IACxB,EAAKiB,SAAS,CAAEJ,aAAc,KAC9B,EAAKK,iBACLC,MAAK,mCAA8BnB,EAA9B,qDACL,EAAKoB,QACLN,QAAQC,IAAI,EAAKJ,MAAMF,YAIvBI,EAAaQ,KAAKrB,GAGlB,EAAKiB,SAAS,CAAET,MAAOK,EAAaS,SAER,KAAxBT,EAAaS,SACf,EAAKL,SAAS,CAAET,MAAO,KACvBW,MAAK,yBACL,EAAKD,iBACL,EAAKE,SAIP,EAAKG,Y,EAKTL,eAAiB,WAEX,EAAKP,MAAMH,MAAQ,EAAKG,MAAMF,SAChC,EAAKQ,SAAS,CAAER,SAAU,EAAKE,MAAMH,QAErC,EAAKC,SAAW,EAAKA,U,EAKzBW,MAAQ,WACL,EAAKP,aAAe,GACpB,EAAKL,MAAQ,EACb,EAAKe,W,EAIRA,QAAU,WACR,EAAKN,SAAS,EAAKL,WAAa,EAAKY,aAAa,EAAKb,MAAMC,c,EAI/DY,aAAe,SAACZ,GACd,IAAIa,EAAGC,EAAGC,EACV,IAAKA,EAAIf,EAAWU,OAAS,EAAGK,EAAI,EAAGA,IACrCF,EAAIG,KAAKC,MAAMD,KAAKE,UAAYH,EAAI,IACpCD,EAAId,EAAWe,GACff,EAAWe,GAAKf,EAAWa,GAC3Bb,EAAWa,GAAKC,EAElB,OAAOd,G,wEAIC,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQJ,MAAOuB,KAAKpB,MAAMH,MACxBC,SAAUsB,KAAKpB,MAAMF,UADvB,iCAICsB,KAAKpB,MAAMC,WAAWoB,IAAI,SAAAC,GAAS,OAClC,kBAAC,EAAD,CACAC,GAAID,EAAUC,GACdC,IAAKF,EAAUC,GACflC,KAAMiC,EAAUjC,KAChBE,MAAO+B,EAAU/B,MACjBE,iBAAkB,EAAKA,0B,GA9FfgC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.62286119.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card (props) {\n    return (\n    <div className=\"card\">\n        <div className=\"img-container\">\n      \n             <img alt={props.name} src={props.image}\n             onClick={() => props.handleClickEvent(props.name)} className=\"click\"/>\n        \n        </div>\n    </div>\n    )\n}\n\nexport default Card;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return  <div className=\"wrapper\">{props.children}</div>\n}\n\nexport default Wrapper;\n\n\n\n\n\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props) {\n    return (\n        <div className=\"header\">\n            <h1 className=\"title\">{props.children}</h1>\n            <h2 className=\"score\"> Score: {props.score}  |  Top Score : {props.topScore}</h2>\n            <h3>Click an image to begin. Click each image only ONCE. You get a point for each character you click on. But DON'T click more than once or GAME OVER!</h3>\n        </div>\n    )\n}\n\nexport default Header;\n\n\n","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n  // Setting state to initial values\n  state = {\n    characters: characters,\n    guessedCards: [],\n    score: 0,\n    topScore: 0\n  };\n\n  // function to get name value of card clicked \n  handleClickEvent = name => {\n    console.log(name)\n\n    let guessedCards = this.state.guessedCards;\n\n      // check to see if card has already been clicked\n      // const characters = this.state.characters.getNamedItem(\"name\").value;\n      // this.setState({ characters });\n\n    // if guessed already, game over\n    if (guessedCards.includes(name)) {\n      this.setState({ guessedCards: [] });\n      this.updateTopScore();\n      alert (`Oops! You already picked ${name}. GAME OVER! But don't worry, you can try again!`);\n      this.reset();\n      console.log(this.state.topScore)\n      \n    } else {\n      // if not guessed yet, push to guessedCards array\n      guessedCards.push(name);\n      \n      // add to score\n      this.setState({ score: guessedCards.length });\n      \n      if (guessedCards.length === 18) {\n        this.setState({ score: 18});\n        alert (`YOU WIN!! GREAT JOB!!`);\n        this.updateTopScore();\n        this.reset();\n      }\n      \n      // continue game\n      this.shuffle()\n    }\n  }\n\n  // update topScore if necessary\n  updateTopScore = () => {\n\n    if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score })\n    } else {\n      this.topScore = this.topScore;\n    }\n  }\n\n  // reset game - clear array and reset score\n  reset = () => {\n     this.guessedCards = [];\n     this.score = 0;\n     this.shuffle()\n  }\n\n  // function to set state of cards to the new shuffled state\n  shuffle = () => {\n    this.setState(this.characters = this.shuffleArray(this.state.characters))\n  }\n\n  // math to shuffle cards\n  shuffleArray = (characters) => {\n    var j, x, i;\n    for (i = characters.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = characters[i];\n      characters[i] = characters[j];\n      characters[j] = x;\n    }\n    return characters;\n  }\n\n// Map over this.state.character and render a Card component for each character object\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.score}\n          topScore={this.state.topScore}>\n          Disney Characters Clicky Game\n        </Header>\n        {this.state.characters.map(character => (\n          <Card\n          id={character.id}\n          key={character.id}\n          name={character.name}\n          image={character.image}\n          handleClickEvent={this.handleClickEvent}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}